using System;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace EcentricHPP.Helpers
{
    public class EncryptionHelper
    {
        private string SecretKey { get; set; }

        public EncryptionHelper(string SecretKey)
        {
            this.SecretKey = SecretKey;
        }

        /// <summary>
        /// function to validate checksum for incoming payment response
        /// </summary>
        /// <param name="TransactionID">Transaction ID generated by Ecentric</param>
        /// <param name="merchantReference">Reference passed by Merchant</param>
        /// <param name="result">0: failure, 1: success</param>
        /// <param name="failureMessage">Response message</param>
        /// <param name="amount">initial amount passed</param>
        /// <param name="checksum">checksum generated by ecentric</param>
        /// <returns>true if valid and vice versa</returns>
        public bool ValidateResponse(string TransactionID, string merchantReference, string result, string failureMessage, long amount, string checksum)
        {
            var checksumString = string.Format("{0}|{1}|{2}|{3}|{4}|{5}", this.SecretKey, TransactionID, merchantReference, result, failureMessage, amount);
            SHA256Managed sha = new SHA256Managed();
            return string.Equals(sha.ComputeHash(Encoding.UTF8.GetBytes(checksumString)).Select(h => h.ToString("X2")).Aggregate((i, j) => i + j), checksum, StringComparison.InvariantCultureIgnoreCase);
        }

        /// <summary>
        /// Generate checksum for Ecentric Payment Transaction
        /// </summary>
        /// <param name="merchantID">Merchant ID provided to Merchant by Ecentric</param>
        /// <param name="transactionType">Payment or Authorize</param>
        /// <param name="amount">payment amount</param>
        /// <param name="currency">currency isocode - 710 for South Africa</param>
        /// <param name="merchantReference">Unique reference for payment session</param>
        /// <param name="userID">Unique user identifier for Ecentric Wallet - pass whitespace or null if no wallet used</param>
        /// <returns>Checksum Value</returns>
        public string GetRequestChecksum(string merchantID, string transactionType, long amount, string currency, string merchantReference, string userID)
        {
            var checksumString = string.Format("{0}|{1}|{2}|{3}|{4}|{5}", this.SecretKey, merchantID, transactionType, amount, currency, merchantReference);
            if (!string.IsNullOrWhiteSpace(userID))
                checksumString += '|' + userID;

            SHA256Managed sha = new SHA256Managed();
            return sha.ComputeHash(Encoding.UTF8.GetBytes(checksumString)).Select(h => h.ToString("X2")).Aggregate((i, j) => i + j);
        }

        /// <summary>
        /// Generate checksum for Wallet Session
        /// </summary>
        /// <param name="merchantID">Merchant ID provided to Merchant by Ecentric</param>
        /// <param name="userID">Unique user identifier</param>
        /// <returns>Checksum Value</returns>
        public string GetCardManageChecksum(string merchantID, string userID)
        {
            var checksumString = string.Format("{0}|{1}|{2}", this.SecretKey, merchantID, userID);
            SHA256Managed sha = new SHA256Managed();
            return sha.ComputeHash(Encoding.UTF8.GetBytes(checksumString)).Select(h => h.ToString("X2")).Aggregate((i, j) => i + j);
        }
    }
}
